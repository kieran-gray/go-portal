{{define "admin"}}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet/less" type="text/css" href="static/stylesheet.less" />
    <link rel="icon" href="static/logo/favicon.ico">
    <script src="https://cdn.jsdelivr.net/npm/less" ></script>
    <script src="static/js/scripts.js"></script>
    <title>Portal</title>
</head>
<body id="body">
    <header class="toolbar_content primary" id="header">
        <img id="company-logo">
        <div class="toolbar_title">Portal</div>
        <div class="spacer"></div>
        <div class="controls-container">
            <input class="form-control rounded" type="search" id="searchBar" oninput="search('admin-card')" placeholder="Search"
                autofocus="autofocus">
            <div class="dropdown-menu">
                <button class="dropdown-btn"></button>
                <div class="dropdown-content">
                    <div class="row" id="toggle-row" style="flex-wrap: nowrap;">
                        <p class="text" id="toggle-label">Dark Mode</p>
                        <label class="switch" id="switch" onchange="toggleDarkMode()">
                            <input type="checkbox" id="dark-mode-toggle">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="row" id="toggle-row">
                        <a class="text" id="download-label" href="/services.json" download>Download JSON</a>
                    </div>
                    <div class="row" id="toggle-row">
                        <a class="navigation-button" href="/">Home</a>
                    </div>
                </div>
            </div>
        </div>
    </header>
    {{ range .Messages }}
        <div class="alert alert-{{ .Status }}">
            <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
            {{ .Message }}
        </div>
    {{ end }}
    <div class="application-container">
        <form action="" class="admin-form" id="admin-form">
            {{range .ServicesFile.Services}}
                {{ template "admin-card" generateAdminCardData .}}
            {{end}}
            <div class="admin-button-row">
                <input class="floating-button admin-button admin-submit"
                    value="submit"
                    method="post"
                    id="admin-form-btn-submit"
                    type="submit"
                    title="Submit changes to S3">
                <input class="floating-button admin-button admin-add" 
                    name="addService"
                    id="admin-form-btn-add-service" 
                    type="submit"
                    method="post"
                    value="+"
                    title="Add a new service">
            </div>
        </form>
    </div>
</body>
</html>
<script>
    onload = newPageLoad();
    function newPageLoad(tabPane = undefined) {
        setDarkModeToggle();
        toggleDarkMode();
        setFormEventListener();
        if (tabPane && tabPane.style) {
            showElement(tabPane);
        }
    }

    function setFormEventListener() {
        const form = document.getElementById("admin-form")
        form.addEventListener("submit", function(e) {
            e.preventDefault();
            submitForm(e.submitter);
        });
    }

    function hideElement(element) {
        element.style.display = "none";
        element.classList.remove("active");
    }

    function showElement(element, display = "") {
        element.style.display = display;
        element.classList.add("active");
    }

    function isActive(element) {
        return element.classList.contains("active");
    }

    function clickTab(tab) {
        // tab ids are in the format: {service-name}-tab-{api/ui}
        const values = tab.id.split("-");
        const serviceType = values[2];
        const card = document.getElementById(values[0]);
        const tabPanes = card.getElementsByClassName("admin-tab-pane");
        for (let i = 0; i < tabPanes.length; i++){
            if (tabPanes[i].classList.contains(serviceType+"-pane") && !isActive(tabPanes[i])) {
                showElement(tabPanes[i]);
            } else {
                hideElement(tabPanes[i]);
            }
        }
    }

    function deleteService(id, name) {
        const menu = document.getElementById(id+"-menu");
        const card = document.getElementById(id);
        const content = menu.getElementsByClassName("more-content");
        if (confirm("Are you sure you want to delete service: "+name)) {
            card.remove();
        }
        hideElement(content[0]);
    }
    
    function deleteEnvironment(id) {
        const environment = document.getElementById(id);
        if (confirm("Are you sure you want to delete environment")) {
            environment.remove();
        }
    }

    function toggleMenu(id) {
        const menu = document.getElementById(id);
        const content = menu.getElementsByClassName("more-content");
        for (let i = 0; i < content.length; i++) {
            if (!content[i].classList.contains("active")) {
                showElement(content[i], "block");
            } else {
                hideElement(content[i]);
            }
        }
    }

    async function submitForm(button) {
        const form = document.getElementById("admin-form");
        const formData = new FormData(form);
        var body = buildJsonFormData(formData)

        var paneId = undefined
        const submitter = button.name || "submit";
        var url = "/admin"
        if (submitter === "addService") {
            url += "/addService";
        } else if (submitter.startsWith("addEnvironment")) {
            const [serviceName, serviceType] = submitter.split("&").slice(-2);
            // Get the updated service name or the pane won't exist when the page
            // is regenerated with the new environment.
            const updatedServiceName = document.getElementById(serviceName+"-metadata-Name").value.replaceAll(" ", "")
            paneId = updatedServiceName+"-"+serviceType+"-pane"
            url += "/addEnv/"+updatedServiceName+"&"+serviceType;
        } else {
            // Only sort when we are submitting to prevent the service you are
            // editing from being moved when adding an environment or new service
            body.services = sortServices(body.services)
        }
        const response = await fetch(url, {
            method: "POST",
            headers: buildHeaders(),
            body: JSON.stringify(body),
        });
        if (response.status == 200) {
            var newBody = document.createElement("body")
            newBody.innerHTML = await response.text()
            document.getElementsByTagName("body")[0].replaceWith(newBody)
            
            var scrollElement = paneId ? document.getElementById(paneId) : window;
            newPageLoad(scrollElement);
            scrollElement.scrollTo({ top: 0, behavior: "smooth" });
        } else {
            console.error(response)
        }
    }

    function cleanEnvironmentData(data) {
        environmentList = []
        if ("environments" in data) {
            environmentList = Object.values(data["environments"])
            environmentList.forEach((environment) => {
                environment["priority"] = parseInt(environment["priority"])
            })
        }
        return environmentList;
    }

    function cleanServices(services) {
        services.forEach((service) => {
            service["metadata"]["dev_only"] = service["metadata"]["dev_only"] === "true"
            service["api"]["environments"] = cleanEnvironmentData(service["api"])
            service["ui"]["environments"] = cleanEnvironmentData(service["ui"])
        });
        return services;
    }

    function buildJsonFormData(formData) {
        regex = /(?<=\[)[^\]]+(?=\])/g;
        const jsonFormData = {}
        for(const pair of formData) {
            let currentLevel = jsonFormData
            keys = pair[0].match(regex);
            keys.forEach((key, index) => {
                const formattedKey = key.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase()
                if (index === keys.length - 1) {
                    currentLevel[formattedKey] = pair[1]
                } else {
                    currentLevel[formattedKey] = currentLevel[formattedKey] || {};
                    currentLevel = currentLevel[formattedKey];
                }
            });
        }
        const date = new Date();
        const body = {
            "metadata": {
                "last_updated_on": date.toISOString(),
                "last_updated_by": "Unknown",
                "version": "Unknown"
            }, 
            "services": cleanServices(Object.values(jsonFormData))
        }
        return body;
    }

    function buildHeaders(authorization = null) {
        const headers = {
            "Content-Type": "application/json",
            "Authorization": (authorization) ? authorization : "Bearer TOKEN_MISSING"
        };
        return headers;
    }

    function sortServices(services) {
        return services.sort((a, b) => {
            return a.metadata.name.toLowerCase().localeCompare(b.metadata.name.toLowerCase());
        });
    }
</script>

{{end}}